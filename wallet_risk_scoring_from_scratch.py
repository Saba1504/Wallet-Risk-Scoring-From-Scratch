# -*- coding: utf-8 -*-
"""Wallet Risk Scoring From Scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10uJ3ydjXXTRS0vp423XCVjMTrxJaB5bQ
"""

pip install subgrounds gql requests pandas numpy scikit-learn

from subgrounds import Subgrounds
import pandas as pd

# === Step 1: Initialize Subgrounds and Load Compound Subgraph ===
sg = Subgrounds()
subgraph = sg.load_subgraph("https://gateway.thegraph.com/api/23ad967061b76af0136f8dd9942c24ea/subgraphs/id/AwoxEZbiWLvv6e3QdvdMZw4WDURdGbvPfHmZRc8Dpfz9")

# === Step 2: Load wallet list from your existing CSV ===
wallet_df = pd.read_csv("Wallet id - Sheet1.csv")  # Ensure this CSV has a column named 'wallet_id'
wallet_list = wallet_df['wallet_id'].unique().tolist()
print(f"Loaded {len(wallet_list)} wallet IDs")

# === Step 3: Define the CompoundV2 entities to fetch (Deposit, Borrow, Repay) ===
deposits = subgraph.Query.deposits
borrows = subgraph.Query.borrows
repays = subgraph.Query.repays

# === Step 4: Fetch Data from Subgraph ===
df_deposits = sg.query_df([
    deposits.account.id,
    deposits.amount
])
df_deposits.rename(columns={"deposits_account_id": "wallet_id", "deposits_amount": "amount"}, inplace=True)

df_borrows = sg.query_df([
    borrows.account.id,
    borrows.amount
])
df_borrows.rename(columns={"borrows_account_id": "wallet_id", "borrows_amount": "amount"}, inplace=True)

df_repays = sg.query_df([
    repays.account.id,
    repays.amount
])
df_repays.rename(columns={"repays_account_id": "wallet_id", "repays_amount": "amount"}, inplace=True)

# === Step 5: Filter only relevant wallet addresses ===
df_deposits = df_deposits[df_deposits["wallet_id"].isin(wallet_list)]
df_borrows = df_borrows[df_borrows["wallet_id"].isin(wallet_list)]
df_repays = df_repays[df_repays["wallet_id"].isin(wallet_list)]

# === Step 6: Compute Risk Score per Wallet ===
results = []
for wallet in wallet_list:
    total_deposited = df_deposits[df_deposits["wallet_id"] == wallet]["amount"].sum()
    total_borrowed = df_borrows[df_borrows["wallet_id"] == wallet]["amount"].sum()
    total_repaid   = df_repays[df_repays["wallet_id"] == wallet]["amount"].sum()

    # Risk Score Logic: based on repayment behavior
    if total_borrowed == 0:
        credit_score = 0.0
    else:
        repay_ratio = total_repaid / total_borrowed
        credit_score = round(min(1.0, repay_ratio) * 1000, 2)

    results.append({
        "wallet_id": wallet,
        "score": credit_score
    })

# === Step 7: Export to CSV ===
df_scores = pd.DataFrame(results)
df_scores.to_csv("compound_wallet_risk_scores.csv", index=False)
print("âœ… Risk scores saved to compound_wallet_risk_scores.csv")